//! Tests for scale-generator
//!
//! Generated by [script][script] using [canonical data][canonical-data]
//!
//! [script]: https://github.com/exercism/rust/blob/main/bin/init_exercise.py
//! [canonical-data]: https://raw.githubusercontent.com/exercism/problem-specifications/main/exercises/scale-generator/canonical_data.json

use scale_generator::*;
use scale_generator::notes::{Note,Letter};

/// Process a single test case for the property `interval`
///
/// All cases for the `interval` property are implemented
/// in terms of this function.
fn process_interval_case(tonic: Note, mode: Mode, expected: &[&str]) {
    let s = Scale::new(tonic, mode).unwrap();
    assert_eq!(s.enumerate(), expected);
}

#[test]
/// Simple major scale
///
/// The simplest major scale, with no sharps or flats.
fn test_simple_major_scale() {
    process_interval_case(
        Note::new(
            Letter::C,
            0
        ), 
        Mode::Ionian, 
        &["C", "D", "E", "F", "G", "A", "B"]);
}

#[test]
/// Major scale with sharps
fn test_major_scale_with_sharps() {
    process_interval_case(
        Note::new(
            Letter::G,
            0
        ), 
        Mode::Ionian, 
        &["G", "A", "B", "C", "D", "E", "F#"]);
}

#[test]
/// Major scale with flats
fn test_major_scale_with_flats() {
    process_interval_case(
        Note::new(
            Letter::F,
            0
        ), 
        Mode::Ionian, 
        &["F", "G", "A", "Bb", "C", "D", "E"]);
}

#[test]
/// Minor scale with sharps
fn test_minor_scale_with_sharps() {
    process_interval_case(
        Note::new(
            Letter::F,
            1
        ), 
        Mode::Aeolian,
        &["F#", "G#", "A", "B", "C#", "D", "E"],
    );
}

#[test]
/// Minor scale with flats
fn test_minor_scale_with_flats() {
    process_interval_case(
        Note::new(
            Letter::B,
            -1,
        ), 
        Mode::Aeolian,
        &["Bb", "C", "Db", "Eb", "F", "Gb", "Ab"],
    );
}

#[test]
/// Dorian mode
fn test_dorian_mode() {
    process_interval_case(
        Note::new(
            Letter::D,
            0
        ), 
        Mode::Dorian, 
        &["D", "E", "F", "G", "A", "B", "C"]);
}

#[test]
/// Mixolydian mode
fn test_mixolydian_mode() {
    process_interval_case(
        Note::new(
            Letter::E,
            -1,
        ), 
        Mode::Mixolydian,
        &["Eb", "F", "G", "Ab", "Bb", "C", "Db"],
    );
}

#[test]
/// Lydian mode
fn test_lydian_mode() {
    process_interval_case(
        Note::new(
            Letter::A,
            0
        ), 
        Mode::Lydian,
        &["A", "B", "C#", "D#", "E", "F#", "G#"],
    );
}

#[test]
/// Phrygian mode
fn test_phrygian_mode() {
    process_interval_case(
        Note::new(
            Letter::E,
            0
        ), 
        Mode::Phrygian, 
        &["E", "F", "G", "A", "B", "C", "D"]);
}

#[test]
/// Locrian mode
fn test_locrian_mode() {
    process_interval_case(
        Note::new(
            Letter::G,
            0
        ), 
        Mode::Locrian,
        &["G", "Ab", "Bb", "C", "Db", "Eb", "F"],
    );
}

//#[test]
//#[ignore]
///// Harmonic minor
/////
///// Note that this case introduces the augmented second interval (A)
//fn test_harmonic_minor() {
//    process_interval_case("d", "MmMMmAm", &["D", "E", "F", "G", "A", "Bb", "Db", "D"]);
//}
//
//#[test]
//#[ignore]
///// Octatonic
//fn test_octatonic() {
//    process_interval_case(
//        "C",
//        "MmMmMmMm",
//        &["C", "D", "D#", "F", "F#", "G#", "A", "B", "C"],
//    );
//}
//
//#[test]
//#[ignore]
///// Hexatonic
//fn test_hexatonic() {
//    process_interval_case("Db", "MMMMMM", &["Db", "Eb", "F", "G", "A", "B", "Db"]);
//}
//
//#[test]
//#[ignore]
///// Pentatonic
//fn test_pentatonic() {
//    process_interval_case("A", "MMAMA", &["A", "B", "C#", "E", "F#", "A"]);
//}
//
//#[test]
//#[ignore]
///// Enigmatic
//fn test_enigmatic() {
//    process_interval_case(
//        "G",
//        "mAMMMmm",
//        &["G", "G#", "B", "C#", "D#", "F", "F#", "G"],
//    );
//}
//
//#[test]
//#[ignore]
//#[should_panic]
///// Invalid Tonic
//fn test_invalid_tonic_diatonic() {
//    process_interval_case(
//        "X",
//        "mAMMMmm",
//        &["G", "G#", "B", "C#", "D#", "F", "F#", "G"],
//    );
//}
//
//#[test]
//#[ignore]
//#[should_panic]
///// Invalid Interval
//fn test_invalid_interval() {
//    process_interval_case(
//        "C",
//        "mAMMMxm",
//        &["G", "G#", "B", "C#", "D#", "F", "F#", "G"],
//    );
//}
//
